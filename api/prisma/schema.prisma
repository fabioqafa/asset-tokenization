// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://postgres:12345678@localhost:5432/asset_tokenization"
}

model Users {
  id        String    @id @default(uuid())
  email     String    @unique
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  // role Roles @relation(fields: [roleId], references: [id])
  // roleId Int
  tenant    Tenants   @relation(fields: [tenantId], references: [id])
  tenantId  String
  accountkeys AccountKeys?
  shareholders Users_Assets[]

}

model Tenants {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  users Users[]
  assets Assets[]
}

model Assets {
  id           String @id @default(uuid())
  tokenId      Int    @default(autoincrement())
  tokenSymbol  String @unique
  address      String
  flatnr       Int 
  floor        Int
  aptnr        Int
  createdAt    DateTime @default(now())
  tenant       Tenants @relation(fields: [tenantId], references: [id])
  tenantId     String
  shareholders Users_Assets[]

  @@unique([address, flatnr, floor, aptnr])
}

model AccountKeys {
  id         String   @id @default(uuid())
  publicKey  String   @unique
  privateKey String   @unique
  createdAt  DateTime @default(now())
  user       Users    @relation(fields: [userId], references: [id])
  userId     String   @unique
}

model Users_Assets {
  asset       Assets   @relation(fields: [assetId], references: [id])
  assetId     String
  user        Users    @relation(fields: [userId], references: [id])
  userId      String
  purchasedAt DateTime @default(now())

  @@id([assetId, userId])
}

// model Roles {
//   id    Int @id @default(autoincrement())
//   role  String @unique
//   user Users[]
// }

// model Users {
//   id String @id @default(uuid())
//   username String @unique
//   accounts Accounts
// }

// model AccountKeys {
//   id String @id @default(uuid())
//   publicKey String
//   privateKey String
//   accounts Accounts //ask Ardit why 
// }

// model Accounts {
//   UserId String @id
//   AccountKeyId String
//   user Users @relation(fields: [UserId], references: [id])
//   accountKey AccountKeys? @relation(fields: [AccountKeyId], references: [id]) //ask Ardit why 
// }